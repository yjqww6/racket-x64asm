#lang typed/racket
(require "../main.rkt"
         typed/racket/unsafe)

(define-cast flfls
  #:type (FlVector FlVector -> Void)
  #:requires (racket/flonum)
  #:ctype (_fun (a b) ::
                (_pointer = (flvector->cpointer a))
                (_pointer = (flvector->cpointer b))
                [_size = (flvector-length b)] -> _void))

(define-cast v->s
  #:type ((Vectorof Fixnum) -> Integer)
  #:ctype (_fun (a : (_vector i _int))
                [_size = (vector-length a)] -> _intptr))

;;; from gcc outputs
(define (generate [asm : Assembler (make-assembler)])
  (parameterize ([current-assembler asm])
    (values
     (flfls
      (parameterize ([current-context (make-context)])
        (with-labels (#:entry a l4 l7 l3 l1)
          (:! a)
          (test rdx rdx)
          (je (rel32 l1))
          (lea rax (mref 64 rdi + 15))
          (sub rax rsi)
          (cmp rax (imm8 30))
          (jbe (rel8 l7))
          (lea rax (mref 64 rdx - 1))
          (cmp rax (imm8 1))
          (jbe (rel8 l7))
          (mov rcx rdx)
          (xor eax eax)
          (shr rcx (imm8 1))
          (sal rcx (imm8 4))
          (nop (mref 32 rax + 0))
          (:! l4)
          (movupd xmm0 (mref 128 rdi + rax))
          (movupd xmm1 (mref 128 rsi + rax))
          (addpd xmm0 xmm1)
          (movups (mref 128 rdi + rax) xmm0)
          (add rax (imm8 16))
          (cmp rax rcx)
          (jne (rel8 l4))
          (mov rcx rdx)
          (and rcx (imm32 -2))
          (and edx (imm32 1))
          (je (rel8 l1))
          (lea rax (mref 64 rdi + rcx * 8))
          (movsd xmm0 (mref 64 rax))
          (addsd xmm0 (mref 64 rsi + rcx * 8))
          (movsd (mref 64 rax) xmm0)
          (ret)
          (:! l7)
          (xor eax eax)
          (:! l3)
          (movsd xmm0 (mref 64 rdi + rax * 8))
          (addsd xmm0 (mref 64 rsi + rax * 8))
          (movsd (mref 64 rdi + rax * 8) xmm0)
          (add rax (imm8 1))
          (cmp rdx rax)
          (jne (rel8 l3))
          (:! l1)
          (ret)
          (emit-code!)
          (find-entry a))))

     (v->s
      (parameterize ([current-context (make-context)])
        (with-labels (#:entry a l7 l5 l3 l1 l10 l8)
          (:! a)
          (test rsi rsi)
          (je (rel32 l7))
          (lea rax (mref 64 rsi - 1))
          (cmp rax (imm8 2))
          (jbe (rel32 l8))
          (mov rdx rsi)
          (pxor xmm0 xmm0)
          (pxor xmm4 xmm4)
          (mov rax rdi)
          (shr rdx (imm8 2))
          (sal rdx (imm8 4))
          (add rdx rdi)
          (:! l5)
          (movdqu xmm1 (mref 128 rax))
          (movdqa xmm2 xmm4)
          (add rax (imm8 16))
          (pcmpgtd xmm2 xmm1)
          (movdqa xmm3 xmm1)
          (punpckldq xmm3 xmm2)
          (punpckhdq xmm1 xmm2)
          (paddq xmm0 xmm3)
          (paddq xmm0 xmm1)
          (cmp rax rdx)
          (jne (rel8 l5))
          (movdqa xmm1 xmm0)
          (mov rdx rsi)
          (psrldq xmm1 (imm8 8))
          (and rdx (imm8 -4))
          (paddq xmm0 xmm1)
          (movq rax xmm0)
          (test sil (imm8 3))
          (je (rel8 l10))
          (:! l3)
          (movsxd rcx (mref 32 rdi + rdx * 4))
          (add rax rcx)
          (lea rcx (mref 64 rdx + 1))
          (cmp rsi rcx)
          (jbe (rel8 l1))
          (movsxd rcx (mref 32 rdi + rcx * 4))
          (add rdx (imm8 2))
          (add rax rcx)
          (cmp rsi rdx)
          (jbe (rel8 l1))
          (movsxd rdx (mref 32 rdi + rdx * 4))
          (add rax rdx)
          (ret)
          (:! l7)
          (xor eax eax)
          (:! l1)
          (ret)
          (nop (mref 32 rax + rax * 1 + 0))
          (:! l10)
          (ret)
          (:! l8)
          (xor edx edx)
          (xor eax eax)
          (jmp (rel8 l3))
          (nop)
          (emit-code!)
          (find-entry a)))))))

(define-values (flvector-add! vector-sum)
  (generate))

(provide vector-sum flvector-add!)

(module+ main
  (time
   (for ([i (in-range 10000)])
     (generate))))

(module+ profile
  (define (p)
    (generate)
    (void))
  (provide p))
